Usage
===========================

How to use django-uni-form


Using the django-uni-form filter (Easy and fun!)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Add ``{% load uni_form_tags %}`` to the template that calls your form.
2. Append your form call with the as_uni_form filter::

    {{ my_form|as_uni_form }}

3. Add the class of 'uniForm' to your form. Example::

    <form action="" method="post" class="uniForm">

4. Refresh and enjoy!

Using the django-uni-form templatetag in your view (Intermediate)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. In your views.py add the following after field definitions::

    from django.shortcuts import render_to_response
    
    from uni_form.helpers import FormHelper, Submit, Reset
    from my_project.forms.MyForm
    
    def my_view(request):
    
        # Create the form
        form = MyForm() 
    
        # create a formHelper
        helper = FormHelper()
        
        # Add in a class and id
        helper.form_id = 'this-form-rocks'
        helper.form_class = 'search'
        
        # add in a submit and reset button
        submit = Submit('search','search this site')
        helper.add_input(submit)
        reset = Reset('reset','reset button')                
        helper.add_input(reset)
        
        # create the response dictionary
        response_dictionary = {'form':form, 'helper': helper}
        
        return render_to_response('my_template.html', response_dictionary)
        
2. In your template do the following::

    {% load uni_form_tags %}
    
    {% uni_form form helper %}

Using the django-uni-form templatetag in your form class (Intermediate)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. In your form class add the following after field definitions::

    from uni_form.helpers import FormHelper, Submit, Reset

    class MyForm(forms.Form):
        title = forms.CharField(label=_("Title"), max_length=30, widget=forms.TextInput())

        # Attach a formHelper to your forms class.
        helper = FormHelper()
        
        # Add in a class and id
        helper.form_id = 'this-form-rocks'
        helper.form_class = 'search'
        
        # add in a submit and reset button
        submit = Submit('search','search this site')
        helper.add_input(submit)
        reset = Reset('reset','reset button')                
        helper.add_input(reset)
        
2. In your template do the following::

    {% load uni_form_tags %}
    {% with form.helper as helper %}
        {% uni_form form helper %}
    {% endwith %}
    
Using the django-uni-form templatetag to change action/method (Intermediate)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. In your form class add the following after field definitions::

    from uni_form.helpers import FormHelper, Submit

    class MyForm(forms.Form):
        title = forms.CharField(label=_("Title"), max_length=30, widget=forms.TextInput())

        # Attach a formHelper to your forms class.
        helper = FormHelper()
        
        # Change the form and method
        helper.form_action = 'my-url-name-defined-in-url-conf'
        helper.form_method = 'GET' # Only GET and POST are legal
        
        # add in a submit and reset button
        submit = Submit('search','search this site')
        helper.add_input(submit)
        
2. In your template do the following::

    {% load uni_form_tags %}
    {% with form.helper as helper %}
        {% uni_form form helper %}
    {% endwith %}



Adding a layout to your form class (Intermediate)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Uniform helpers can use layout objects. A layout can consist of fieldsets, rows, columns, HTML and fields. A simple Example::

    from django import forms
    
    from uni_form.helpers import FormHelper, Submit, Reset
    from uni_form.helpers import Layout, Fieldset, Row, HTML
	
    class LayoutTestForm(forms.Form):

        is_company = forms.CharField(label="company", required=False, widget=forms.CheckboxInput())    
        email = forms.CharField(label="email", max_length=30, required=True, widget=forms.TextInput())        
        password1 = forms.CharField(label="password", max_length=30, required=True, widget=forms.PasswordInput())
        password2 = forms.CharField(label="re-enter password", max_length=30, required=True, widget=forms.PasswordInput())    
        first_name = forms.CharField(label="first name", max_length=30, required=True, widget=forms.TextInput())        
        last_name = forms.CharField(label="last name", max_length=30, required=True, widget=forms.TextInput())            
    
        # Attach a formHelper to your forms class.
        helper = FormHelper()

        # Create some HTML that you want in the page.
        # Yes, in real life your CSS would be cached, but this is just a simple example.
        style = """
        <style>
            .formRow {
                color: red;
            }
        </style>
    
        """
        # create the layout object
        layout = Layout(
                        # first fieldset shows the company
                        Fieldset('', 'is_company'),
                    
                        # second fieldset shows the contact info
                        Fieldset('Contact details',
                                HTML(style),
                                'email',
                                Row('password1','password2'),
                                'first_name',
                                'last_name',
                                 )
                        )

        helper.add_layout(layout)
                      
        submit = Submit('add','Add this contact')
        helper.add_input(submit)
        
Then, just like in the previous example, add the following to your template::

    {% load uni_form_tags %}
    {% with form.helper as helper %}
        {% uni_form form helper %}
    {% endwith %}
           

This allows you to group fields in fieldsets, or rows or columns or add HTML between fields etc.

Using formsets (Advanced)
~~~~~~~~~~~~~~~~~~~~~~~~~

This example implies you have similar modeling to this::

    class Company(model.Model)
        name = models.CharField(max_length=250)
        address = models.CharField(max_length=250)
    
    class ContactPerson(models.Model):
        company = models.ForeignKey(Company, related_name="contact_persons")
        last_name = models.CharField(max_length=250)
        first_name = models.CharField(max_length=250)

You'll have two model forms: a regular one for the company and a formset for the contact persons:
   
    class CompanyForm(forms.ModelForm):
        class Meta:
            model = Company

        helper = FormHelper()
        helper.form_method = 'POST'

        layout = Layout(
            Fieldset(_('Basic information'),
                'name',
                'address'
            ),
            Fieldset(_('Contact persons'),
                InlineFormSet(
                    'contact_persons',
                    css_class = 'inlineLabels'
                )
            )
        )
        
        helper.add_layout(layout)
        submit = Submit("submit", _("Save"))
        helper.add_input(submit)
    
    class ContactPersonForm(forms.ModelForm):
        class Meta:
            model = ContactPerson

        helper = FormHelper()
        layout = Layout(
            AlternateField(_("Mr./Mrs."),
                'first_name',
                'last_name',
                css_class="ctrlHolder twoCols"
            )
        )
        helper.form_tag = False
        helper.add_layout(layout)
        
    ContactPersonFormset = inlineformset_factory(
        Company, ContactPerson,
        form=ContactPersonForm,
        extra=3, can_delete=False)
        
This will properly render the formsets, if the CompanyForm instance has a contact_persons attribute 
with an instance of ContactPersonsFormset. You could do it like this in a view::

        ...
        
        if request.method == 'POST':
            form = forms.CompanyForm(request.POST, instance=company)
            contact_persons_formset = ContactPersonFormset(request.POST, prefix='contact_persons', instance=company)
            
            if form.is_valid() and contact_persons_formset.is_valid():
                company = form.save()
                contact_persons = contact_persons_formset.save(commit=False)
                for obj in contact_persons:
                    obj.company = company
                    obj.save()
        else:
            form = CompanyForm(instance=company)
            contact_persons_formset = ContactPersonFormset(prefix='contact_persons', instance=company)
            
        form.contact_persons = contact_persons_formset
        
        return render_to_response('company-submit-page.html', {
            'form': form,
        }, context_instance=RequestContext(request))
    
Template code is like in the previous example::
    
    {% load uni_form_tags %}
    {% with form.helper as helper %}
        {% uni_form form helper %}
    {% endwith %}



.. _Django: http://djangoproject.com
.. _`Uni-form`: http://sprawsm.com/uni-form